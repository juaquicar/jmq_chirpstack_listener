#!/usr/bin/env bash
# ------------------------------------------------------------------------------
#  Despliega el stack de DESARROLLO con nombres aislados para evitar colisiones
#  con los contenedores/volÃºmenes/redes del stack de PRODUCCIÃ“N.
# ------------------------------------------------------------------------------

set -euo pipefail

# Nombre de proyecto que Compose usarÃ¡ como prefijo
DEV_PROJECT="jmq_chirpstack_listener_dev"

echo "ðŸ“¦ Deteniendo contenedores antiguosâ€¦"
docker compose \
  -p "${DEV_PROJECT}" \
  -f docker-compose.dev.yml \
  down --remove-orphans

echo "ðŸ”§ Construyendo contenedores desde cero (sin cachÃ©)â€¦"
docker compose \
  -p "${DEV_PROJECT}" \
  -f docker-compose.dev.yml \
  build --no-cache

echo "ðŸš€ Levantando servicios en segundo planoâ€¦"
docker compose \
  -p "${DEV_PROJECT}" \
  -f docker-compose.dev.yml \
  up -d

echo "âœ… Despliegue completado. Contenedores activos:"
docker compose \
  -p "${DEV_PROJECT}" \
  -f docker-compose.dev.yml \
  ps



docker exec -it chirpstack_timescaledb_dev psql -U sensoruser -d sensordata        -c "ALTER USER sensoruser WITH PASSWORD 'sensorpass';"
PGPASSWORD=sensorpass psql -h localhost -p 15432 -U sensoruser -d sensordata -c '\conninfo'

echo "âœ… Mostrando LOGs."
docker compose -p jmq_chirpstack_listener_dev logs -f app

